# -*- coding: utf-8 -*-
"""Assistente. Áudio

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1blEs8VfUNzeRREqAfVvL_c6WZPu4ozhf
"""

#Pips necessários para instalar todas as bibliotecas
!pip install SpeechRecognition gTTS playsound pyjokes wikipedia pygame winshell
!apt-get install portaudio19-dev
!pip install pyaudio
!pip install pydub

"""#Conversão de Texto em Áudio, e Áudio em uma Ordem
Devido a indisponibilidade do Colab, o código realiza as seguintes tarefas:

1. Converte Texto em Áudio: O usuário insere um texto que é convertido em áudio usando a biblioteca gTTS. O áudio é salvo em MP3 e convertido para WAV para ser processado.

2. Reprodução de Áudio: O áudio gerado é reproduzido automaticamente para o usuário.

3. Reconhecimento de Comando de Voz: O áudio é analisado usando speech_recognition para identificar comandos. Se o comando reconhecido for "abrir câmera", a próxima etapa é executada.

4. Abertura da Câmera: A câmera do navegador é ativada via JavaScript, captura uma foto após 5 segundos, salva a imagem localmente e exibe o resultado.

O fluxo permite que comandos de voz acionem a câmera de forma automatizada.
"""

#Bibliotecas
from gtts import gTTS
from IPython.display import Audio, display, Javascript, Image
import speech_recognition as sr
from pydub import AudioSegment
from google.colab.output import eval_js
from base64 import b64decode
import numpy as np
import cv2
import os

# Função para converter JavaScript para imagem
def js_to_image(js_reply):
    image_bytes = b64decode(js_reply.split(',')[1])
    jpg_as_np = np.frombuffer(image_bytes, dtype=np.uint8)
    return cv2.imdecode(jpg_as_np, flags=1)

# Função para abrir a câmera usando JavaScript no navegador
def open_camera():
    js = Javascript('''
        async function takePhoto() {
            const video = document.createElement('video');
            const stream = await navigator.mediaDevices.getUserMedia({video: true});
            video.srcObject = stream;
            await video.play();

            document.body.appendChild(video);
            await new Promise(resolve => setTimeout(resolve, 5000));

            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);

            stream.getTracks().forEach(track => track.stop());
            video.remove();

            return canvas.toDataURL('image/jpeg', 0.8);
        }
    ''')
    display(js)
    js_reply = eval_js('takePhoto()')
    img = js_to_image(js_reply)
    filename = 'captured_image.jpg'
    cv2.imwrite(filename, img)
    display(Image(filename))
    print(f"Imagem capturada e salva como {filename}.")

# Função para converter texto em áudio e salvar em MP3, depois converter para WAV
def text_to_speech(text, lang='pt', slow=False, mp3_filename='output.mp3', wav_filename='output.wav'):
    try:
        tts = gTTS(text=text, lang=lang, slow=slow)
        tts.save(mp3_filename)

        # Converter MP3 para WAV
        audio = AudioSegment.from_mp3(mp3_filename)
        audio.export(wav_filename, format="wav")

        return wav_filename
    except Exception as e:
        print(f"Erro ao converter texto em áudio: {e}")
        return None

# Função para reconhecer comandos de voz a partir de um arquivo de áudio WAV
def recognize_speech_from_file(filename):
    recognizer = sr.Recognizer()
    with sr.AudioFile(filename) as source:
        audio = recognizer.record(source)
        try:
            command = recognizer.recognize_google(audio, language='pt-BR')
            print(f"Você disse: {command}")
            return command.lower()
        except sr.UnknownValueError:
            print("Não entendi o comando.")
            return ""
        except sr.RequestError:
            print("Erro ao conectar com o serviço de reconhecimento de voz.")
            return ""

if __name__ == "__main__":
    # Converter texto inicial para áudio
    texto_inicial = input("Digite o texto que deseja converter em áudio: ")
    audio_file = text_to_speech(texto_inicial)
    if audio_file and os.path.exists(audio_file):
        display(Audio(audio_file))
    else:
        print("Falha ao gerar o áudio.")

    # Reconhecer comando de voz a partir do áudio gerado
    comando = recognize_speech_from_file(audio_file)
    if 'abrir câmera' in comando:
        open_camera()
    else:
        print("Comando não reconhecido para abrir a câmera.")